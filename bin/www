#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { readFileSync } = require("fs");
const app = require("../app");
const debug = require("debug")("taskflare-expressjs:server");
const https = require("https");
const http = require("http");
const path = require("path");
const dotenv = require("dotenv");
const mongoose = require("mongoose");

/**
 * Get environment variables in Express.
 */

dotenv.config();
const port = normalizePort(process.env.PORT || "443");
const protocol = process.env.PROTOCOL;
app.set("port", port);
const dbUrl = process.env.MONGODB_URI;

/**
 * Connect to database
 */

mongoose
  .connect(dbUrl)
  .then(() => console.log("Connection to database suceeded!"));

/**
 * Create server.
 */

let server;

if (protocol.toUpperCase() === "HTTPS") {
  server = https.createServer(
    {
      key: readFileSync(path.join(__dirname, "../ssl/key.pem")),
      cert: readFileSync(path.join(__dirname, "../ssl/cert.pem"))
    },
    app
  );
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  // Check protocol and port to log
  const protocolName =
    protocol.toUpperCase() === "HTTPS"
      ? "https://localhost"
      : `http://127.0.0.1:${port}`;

  console.log(`Server is running on ${protocolName}`);
}
